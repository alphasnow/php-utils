{"repo_token":"Q9s7h0tmCJDX9fscwEj37va1JXxWINIJe","git":{"branch":"main","head":{"id":"'3219f616ad173eb759c5352227705e8bc0aa9094","author_name":"weifeng","author_email":"wind91@foxmail.com","committer_name":"weifeng","committer_email":"wind91@foxmail.com","message":"coverage'"},"remotes":[{"name":"origin","url":"git@github.com:alphasnow\/php-utils.git"}]},"run_at":"2022-10-25 03:13:13 +0000","source_files":[{"name":"src\\ListTree.php","source":"<?php\r\n\r\n\/*\r\n * This file is part of the alphasnow\/utils.\r\n * (c) alphasnow <wind91@foxmail.com>\r\n * This source file is subject to the MIT license that is bundled.\r\n *\/\r\n\r\nnamespace AlphaSnow\\Utils;\r\n\r\n\/**\r\n * List array convert to tree array.\r\n *\r\n * Class ListTree\r\n *\/\r\nclass ListTree\r\n{\r\n    \/**\r\n     * list to tree.\r\n     *\r\n     * @param array  $list\r\n     * @param string $pk\r\n     * @param string $pid\r\n     * @param string $child\r\n     * @param int    $root\r\n     *\r\n     * @return array\r\n     *\/\r\n    public static function listToTree($list, $pk = \"id\", $pid = \"pid\", $child = \"_child\", $root = 0)\r\n    {\r\n        $tree = [];\r\n        if (is_array($list)) {\r\n            $refer = [];\r\n            foreach ($list as $key => $data) {\r\n                $refer[$data[$pk]] = &$list[$key];\r\n            }\r\n            foreach ($list as $key => $data) {\r\n                $parentId = $data[$pid];\r\n                if ($root === $parentId) {\r\n                    $tree[] = &$list[$key];\r\n                } else {\r\n                    if (isset($refer[$parentId])) {\r\n                        $parent = &$refer[$parentId];\r\n                        $parent[$child][] = &$list[$key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return $tree;\r\n    }\r\n\r\n    \/**\r\n     * tree to list.\r\n     *\r\n     * @param array  $tree\r\n     * @param string $child\r\n     * @param string $order\r\n     * @param array  $list\r\n     *\r\n     * @return array\r\n     *\/\r\n    public static function TreeToList($tree, $child = \"_child\", $order = \"id\", &$list = [])\r\n    {\r\n        if (is_array($tree)) {\r\n            foreach ($tree as $key => $value) {\r\n                $buffer = $value;\r\n                if (isset($buffer[$child])) {\r\n                    unset($buffer[$child]);\r\n                    self::TreeToList($value[$child], $child, $order, $list);\r\n                }\r\n                $list[] = $buffer;\r\n            }\r\n            $list = self::listSortBy($list, $order, $sortBy = \"asc\");\r\n        }\r\n\r\n        return $list;\r\n    }\r\n\r\n    \/**\r\n     * array sort.\r\n     *\r\n     * @param array  $list\r\n     * @param string $field\r\n     * @param string $sortBy\r\n     *\r\n     * @return array\r\n     *\/\r\n    public static function listSortBy($list, $field, $sortBy = \"asc\")\r\n    {\r\n        $refer = $resultSet = [];\r\n        foreach ($list as $i => $data) {\r\n            $refer[$i] = &$data[$field];\r\n        }\r\n        switch ($sortBy) {\r\n            case \"asc\":\r\n                asort($refer);\r\n\r\n                break;\r\n            case \"desc\":\r\n                arsort($refer);\r\n\r\n                break;\r\n            case \"nat\":\r\n                natcasesort($refer);\r\n\r\n                break;\r\n        }\r\n        foreach ($refer as $key => $val) {\r\n            $resultSet[] = &$list[$key];\r\n        }\r\n\r\n        return $resultSet;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,null,1,1,1,1,null,1,1,1,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,null,1,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,null,2,2,2,null,2,1,1,null,1,1,1,null,1,null,2,2,null,null,2,null,null]},{"name":"src\\helpers.php","source":"<?php\r\n\r\n\/*\r\n * This file is part of the alphasnow\/utils.\r\n * (c) alphasnow <wind91@foxmail.com>\r\n * This source file is subject to the MIT license that is bundled.\r\n *\/\r\n\r\nif (! function_exists(\"snake_name\")) {\r\n    \/**\r\n     * Get snake name.\r\n     *\r\n     * @param string $name\r\n     *\r\n     * @return string\r\n     *\/\r\n    function snake_name($name)\r\n    {\r\n        if (! ctype_lower($name)) {\r\n            $name = preg_replace(\"\/\\s+\/u\", \"\", $name);\r\n            $name = preg_replace(\"\/(.)(?=[A-Z])\/u\", \"$1\".\"_\", $name);\r\n            $name = mb_strtolower($name, \"UTF-8\");\r\n        }\r\n\r\n        return $name;\r\n    }\r\n}\r\n\r\nif (! function_exists(\"studly_name\")) {\r\n    \/**\r\n     * Get studly name.\r\n     *\r\n     * @param string $name\r\n     *\r\n     * @return string\r\n     *\/\r\n    function studly_name($name)\r\n    {\r\n        $name = ucwords(str_replace([\"-\", \"_\"], \" \", $name));\r\n        $name = str_replace(\" \", \"\", $name);\r\n\r\n        return $name;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,null,null]}],"environment":{"packagist_version":"2.2.0"}}